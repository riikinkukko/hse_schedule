from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from keyboards import get_main_menu
from states import UserStates
from database.database import db

command_router = Router(name=__name__)


@command_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if db.user_exists(user_id):
        user_groups = db.get_user_groups(user_id)
        if user_groups:
            group_cst, group_eng = user_groups
            await message.answer(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n"
                f"üìä –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞ –ö–ù–¢: {group_cst}\n"
                f"‚Ä¢ –ì—Ä—É–ø–ø–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {group_eng}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu()
            )
            await state.set_state(UserStates.main_menu)
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_menu()
            )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ù–ò–£ –í–®–≠!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤–∞—à–∏ –≥—Ä—É–ø–ø—ã.\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –ö–ù–¢ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É, 1-7)"
        )
        await state.set_state(UserStates.waiting_for_cst_group)


@command_router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if not db.user_exists(user_id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return

    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await state.set_state(UserStates.main_menu)


@command_router.message(Command("profile"))
async def cmd_profile(message: Message):
    user_id = message.from_user.id

    if not db.user_exists(user_id):
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    user_groups = db.get_user_groups(user_id)
    if user_groups:
        group_cst, group_eng = user_groups
        await message.answer(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üÜî ID: {user_id}\n"
            f"üìä –ì—Ä—É–ø–ø–∞ –ö–ù–¢: {group_cst}\n"
            f"üåç –ì—Ä—É–ø–ø–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {group_eng}"
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.")


@command_router.message(Command("reset"))
async def cmd_reset(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if db.user_exists(user_id):
        db.delete_user(user_id)

    await state.clear()
    await message.answer(
        "üóëÔ∏è –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )


@command_router.message(Command("settings"))
async def cmd_settings(message: Message):
    user_id = message.from_user.id

    if not db.user_exists(user_id):
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    user_groups = db.get_user_groups(user_id)
    if user_groups:
        group_cst, group_eng = user_groups
        settings_text = (
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –ì—Ä—É–ø–ø–∞ –ö–ù–¢: {group_cst}\n"
            f"‚Ä¢ –ì—Ä—É–ø–ø–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {group_eng}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
    else:
        settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    from keyboards import get_settings_menu
    await message.answer(settings_text, reply_markup=get_settings_menu())