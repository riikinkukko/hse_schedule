from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext


from keyboards import get_main_menu
from states import UserStates


menu_router = Router(name=__name__)


@menu_router.callback_query(F.data == "choose_schedule")
async def choose_schedule(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.waiting_for_schedule)
    
    schedule_options = [
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢1",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢2", 
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢3", 
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢4",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢5", 
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢6",    
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢7",
    ]
    
    builder = InlineKeyboardBuilder()
    for i, option in enumerate(schedule_options):
        builder.button(text=option, callback_data=f"schedule_{i}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@menu_router.callback_query(F.data.startswith("schedule_"))
async def schedule_selected(callback: CallbackQuery, state: FSMContext):
    schedule_index = int(callback.data.split("_")[1])
    schedule_names = [
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢1",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢2", 
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢3", 
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢4",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢5", 
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢6",    
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ö–ù–¢7",    
        ]
    
    selected_schedule = schedule_names[schedule_index] if schedule_index < len(schedule_names) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    await state.update_data(user_schedule=selected_schedule)
    await state.set_state(UserStates.main_menu)
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_schedule}",
        reply_markup=get_main_menu()
    )
    await callback.answer()


@menu_router.callback_query(F.data == "settings")
async def settings(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="clear_data")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@menu_router.callback_query(F.data == "clear_data")
async def clear_data(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üóëÔ∏è –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!",
        reply_markup=get_main_menu()
    )
    await callback.answer()


@menu_router.callback_query(F.data == "statistics")
async def statistics(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    schedule = user_data.get("user_schedule")
    
    stats_text = "üìä –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        
    if schedule:
        stats_text += f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}\n"
    else:
        stats_text += f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ\n"
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_main_menu()
    )
    await callback.answer()


@menu_router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )