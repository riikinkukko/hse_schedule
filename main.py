import asyncio
import logging
import bot_token
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = bot_token.TELEGRAM_TOKEN

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_for_location = State()
    waiting_for_schedule = State()
    main_menu = State()

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="change_location")
    builder.button(text="üìÖ –í—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="choose_schedule")
    builder.button(text="üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="build_route")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    builder.adjust(2)  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(UserStates.main_menu)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é! üöÄ"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext):
    await state.set_state(UserStates.main_menu)
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é"
@router.callback_query(F.data == "change_location")
async def change_location(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.waiting_for_location)
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–µ üìé -> Location",
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(UserStates.waiting_for_location, F.location)
async def location_received(message: Message, state: FSMContext):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±—É–¥—É—â–∏–º –º–æ–¥—É–ª–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
    latitude = message.location.latitude
    longitude = message.location.longitude
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(user_location=(latitude, longitude))
    
    await state.set_state(UserStates.main_menu)
    await message.answer(
        f"–í–∞—à–∞ –ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: —à–∏—Ä–æ—Ç–∞ {latitude}, –¥–æ–ª–≥–æ—Ç–∞ {longitude}",
        reply_markup=get_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@router.callback_query(F.data == "choose_schedule")
async def choose_schedule(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.waiting_for_schedule)
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±—É–¥—É—â–∏–º –º–æ–¥—É–ª–µ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_options = [
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã 1",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã 2", 
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    ]
    
    builder = InlineKeyboardBuilder()
    for i, option in enumerate(schedule_options):
        builder.button(text=option, callback_data=f"schedule_{i}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@router.callback_query(F.data.startswith("schedule_"))
async def schedule_selected(callback: CallbackQuery, state: FSMContext):
    schedule_index = int(callback.data.split("_")[1])
    schedule_names = [
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã 1",
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã 2", 
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
        "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    ]
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±—É–¥—É—â–∏–º –º–æ–¥—É–ª–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    selected_schedule = schedule_names[schedule_index] if schedule_index < len(schedule_names) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    await state.update_data(user_schedule=selected_schedule)
    
    await state.set_state(UserStates.main_menu)
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_schedule}",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"
@router.callback_query(F.data == "build_route")
async def build_route(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    location = user_data.get("user_location")
    schedule = user_data.get("user_schedule")
    
    if not location:
        await callback.message.edit_text(
            "–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à—É –ª–æ–∫–∞—Ü–∏—é!",
            reply_markup=get_main_menu()
        )
        await callback.answer()
        return
        
    if not schedule:
        await callback.message.edit_text(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!",
            reply_markup=get_main_menu()
        )
        await callback.answer()
        return
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±—É–¥—É—â–∏–º–∏ –º–æ–¥—É–ª—è–º–∏:
    # 1. –ú–æ–¥—É–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    # 2. –ú–æ–¥—É–ª—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
    # 3. –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å SQL
    
    await callback.message.edit_text(
        "üîÑ –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç..."
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=None
    )
    
    # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    # parsed_schedule = parse_schedule(schedule)
    # route = build_route_algorithm(location, parsed_schedule)
    # save_to_db(user_id, route, schedule)
    
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        "‚úÖ –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω!"
        "–í–∞—à –º–∞—Ä—à—Ä—É—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@router.callback_query(F.data == "settings")
async def settings(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="clear_data")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text( "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
@router.callback_query(F.data == "clear_data")
async def clear_data(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üóëÔ∏è –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router.callback_query(F.data == "statistics")
async def statistics(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    location = user_data.get("user_location")
    schedule = user_data.get("user_schedule")
    
    stats_text = "üìä –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    if location:
        stats_text += f"üìç –õ–æ–∫–∞—Ü–∏—è: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else:
        stats_text += f"üìç –õ–æ–∫–∞—Ü–∏—è: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
    if schedule:
        stats_text += f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    else:
        stats_text += f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_main_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.main_menu)
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(UserStates.main_menu)
async def unknown_message(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_menu()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())